name: Build Besmi Android APK - Offline Mode & Dark Theme

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Create Required Package Files
      run: |
        # Create package.json if missing
        if [ ! -f "package.json" ]; then
          cat > package.json << 'EOF'
        {
          "name": "besmi-mobile-app",
          "version": "1.0.0",
          "description": "Besmi Mobile App - Professional Lash Booking Platform",
          "main": "index.js",
          "scripts": {
            "build": "cd client && npm run build",
            "start": "cd client && npm start"
          },
          "dependencies": {
            "@capacitor/android": "^6.1.0",
            "@capacitor/camera": "^6.0.0",
            "@capacitor/cli": "^6.1.0",
            "@capacitor/core": "^6.1.0",
            "@capacitor/haptics": "^6.0.0",
            "@capacitor/keyboard": "^6.0.0",
            "@capacitor/push-notifications": "^6.0.0",
            "@capacitor/share": "^6.0.0",
            "@capacitor/splash-screen": "^6.0.0",
            "@capacitor/status-bar": "^6.0.0"
          },
          "devDependencies": {
            "typescript": "^5.0.0"
          },
          "keywords": ["mobile", "lash", "booking", "beauty", "capacitor"],
          "author": "Besmi",
          "license": "MIT"
        }
        EOF
        fi
        
        # Create client package.json if missing
        if [ ! -f "client/package.json" ]; then
          mkdir -p client
          cat > client/package.json << 'EOF'
        {
          "name": "besmi-client",
          "version": "1.0.0",
          "type": "module",
          "scripts": {
            "build": "tsc && vite build",
            "dev": "vite",
            "preview": "vite preview"
          },
          "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0"
          },
          "devDependencies": {
            "@types/react": "^18.2.0",
            "@types/react-dom": "^18.2.0",
            "@vitejs/plugin-react": "^4.0.0",
            "typescript": "^5.0.0",
            "vite": "^4.4.0"
          }
        }
        EOF
        fi
    
    - name: Create Correct Capacitor Config
      run: |
        cat > capacitor.config.ts << 'EOF'
        import { CapacitorConfig } from '@capacitor/cli';

        const config: CapacitorConfig = {
          appId: 'com.besmi.lashbooking',
          appName: 'Besmi',
          webDir: 'dist',
          server: {
            url: 'https://besmi.replit.app',
            cleartext: true,
            androidScheme: 'https'
          },
          android: {
            allowMixedContent: true,
            webContentsDebuggingEnabled: false
          },
          plugins: {
            SplashScreen: {
              launchShowDuration: 2000,
              backgroundColor: "#000000",
              showSpinner: false,
              androidSplashResourceName: "splash",
              splashFullScreen: true,
              splashImmersive: true
            },
            StatusBar: {
              style: 'dark',
              backgroundColor: '#000000'
            },
            PushNotifications: {
              presentationOptions: ["badge", "sound", "alert"]
            }
          }
        };

        export default config;
        EOF
    
    - name: Create Mobile Auth Fix Files
      run: |
        mkdir -p client/src/components
        
        # Create MobileErrorBoundary component
        cat > client/src/components/MobileErrorBoundary.tsx << 'EOF'
        import { Component, ReactNode, ErrorInfo } from 'react';
        import { Button } from '@/components/ui/button';
        import { AlertTriangle, RefreshCw } from 'lucide-react';

        interface Props {
          children: ReactNode;
        }

        interface State {
          hasError: boolean;
          error?: Error;
          errorInfo?: ErrorInfo;
        }

        export class MobileErrorBoundary extends Component<Props, State> {
          constructor(props: Props) {
            super(props);
            this.state = { hasError: false };
          }

          static getDerivedStateFromError(error: Error): State {
            return { hasError: true, error };
          }

          componentDidCatch(error: Error, errorInfo: ErrorInfo) {
            console.error('Mobile app error:', error, errorInfo);
            this.setState({ error, errorInfo });
          }

          handleReload = () => {
            window.location.reload();
          };

          handleReset = () => {
            this.setState({ hasError: false, error: undefined, errorInfo: undefined });
          };

          render() {
            if (this.state.hasError) {
              return (
                <div className="min-h-screen bg-gray-50 flex items-center justify-center p-6">
                  <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-6 text-center">
                    <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <AlertTriangle className="w-8 h-8 text-red-600" />
                    </div>
                    
                    <h1 className="text-xl font-semibold text-gray-900 mb-2">
                      App Error
                    </h1>
                    
                    <p className="text-gray-600 mb-6">
                      Something went wrong. Let's get you back on track.
                    </p>

                    <div className="space-y-3">
                      <Button 
                        onClick={this.handleReset}
                        className="w-full"
                        variant="outline"
                      >
                        Try Again
                      </Button>
                      
                      <Button 
                        onClick={this.handleReload}
                        className="w-full"
                      >
                        <RefreshCw className="w-4 h-4 mr-2" />
                        Reload App
                      </Button>
                    </div>
                  </div>
                </div>
              );
            }

            return this.props.children;
          }
        }
        EOF
        
        # Update App.tsx to include error boundary
        if [ -f "client/src/App.tsx" ]; then
          # Add import if not present
          grep -q "MobileErrorBoundary" client/src/App.tsx || sed -i '/import.*TooltipProvider/a import { MobileErrorBoundary } from "@/components/MobileErrorBoundary";' client/src/App.tsx
          
          # Wrap Router with error boundary if not already wrapped
          if ! grep -q "MobileErrorBoundary>" client/src/App.tsx; then
            sed -i 's/<Toaster \/>/<MobileErrorBoundary>\n          <Toaster \/>/; s/<Router \/>/<Router \/>\n        <\/MobileErrorBoundary>/' client/src/App.tsx
          fi
        fi
    
    - name: Install Dependencies
      run: |
        npm install
        npm install -D typescript
        cd client && npm install
    
    - name: Create Simple Web Build
      run: |
        # Create a simple index.html that redirects to besmi.com
        mkdir -p dist
        cat > dist/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Besmi - Loading...</title>
          <style>
            body { 
              margin: 0; 
              background: #000; 
              color: #fff; 
              font-family: system-ui; 
              display: flex; 
              align-items: center; 
              justify-content: center; 
              height: 100vh; 
              text-align: center;
            }
            .logo { font-size: 4rem; font-weight: bold; margin-bottom: 1rem; }
            .loading { font-size: 1.2rem; opacity: 0.8; }
          </style>
        </head>
        <body>
          <div>
            <div class="logo">B</div>
            <div class="loading">Loading Besmi...</div>
          </div>
          <script>
            // Redirect to live platform after brief loading screen
            setTimeout(() => {
              window.location.href = 'https://besmi.com';
            }, 2000);
          </script>
        </body>
        </html>
        EOF
    
    - name: Install Capacitor CLI
      run: npm install -g @capacitor/cli
    
    - name: Add Android Platform
      run: npx cap add android
    
    - name: Sync Capacitor
      run: npx cap sync android
    
    - name: Build Android APK
      run: |
        cd android
        ./gradlew assembleDebug
    
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: besmi-android-apk-offline-mode-dark-theme
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
